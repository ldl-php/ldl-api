<?php

namespace LDL\Http\Api\Service\Application\Endpoint\Config;

class EndpointConfig implements EndpointConfigInterface
{
    public const DEFAULT_VERSION = '1.0';
    public const DEFAULT_AUTHENTICATION_TYPE = 'basic';
    public const DEFAULT_NAME = 'Autogenerated endpoint name';
    public const DEFAULT_DESCRIPTION = 'Autogenerated endpoint description';
    public const DEFAULT_REQUEST_METHOD = 'post';
    public const DEFAULT_RESPONSE_CONTENT_TYPE = 'application/json';

    /**
     * @var string
     */
    private $version = self::DEFAULT_VERSION;

    /**
     * @var string
     */
    private $urlPrefix = '';

    /**
     * @var string
     */
    private $authenticationType = self::DEFAULT_AUTHENTICATION_TYPE;

    /**
     * @var string
     */
    private $name = self::DEFAULT_NAME;

    /**
     * @var string
     */
    private $description = self::DEFAULT_DESCRIPTION;

    /**
     * @var string
     */
    private $dispatcherClass = '';

    /**
     * @var string
     */
    private $requestMethod = self::DEFAULT_REQUEST_METHOD;

    /**
     * @var string
     */
    private $requestHeadersSchemaRepository = '';

    /**
     * @var string
     */
    private $requestParamsSchemaRepository = '';

    /**
     * @var string
     */
    private $responseContentType = self::DEFAULT_RESPONSE_CONTENT_TYPE;

    public static function fromArray(array $options) : self
    {
        $instance = new static();
        $defaults = $instance->toArray();

        $merge = array_replace_recursive($defaults, $options);

        return $instance->setVersion($merge['version'])
            ->setUrlPrefix($merge['url']['prefix'])
            ->setAuthenticationType($merge['url']['authentication']['type'])
            ->setName($merge['name'])
            ->setDescription($merge['description'])
            ->setDispatcherClass($merge['dispatcher']['class'])
            ->setRequestMethod($merge['request']['method'])
            ->setRequestHeadersSchemaRepository($merge['request']['headers']['schema']['repository'])
            ->setRequestParamsSchemaRepository($merge['request']['parameters']['schema']['repository'])
            ->setResponseContentType($merge['response']['contentType']);
    }

    public function toArray(): array
    {
        return [
            'version' => $this->getVersion(),
            'url' => [
                'prefix' => $this->getUrlPrefix(),
                'authentication' => [
                    'type' => $this->getAuthenticationType()
                ]
            ],
            'name' => $this->getName(),
            'description' => $this->getDescription(),
            'dispatcher' => [
                'class' => $this->getDispatcherClass()
            ],
            'request' => [
                'method' => $this->getRequestMethod(),
                'headers' => [
                    'schema' => [
                        'repository' => $this->getRequestHeadersSchemaRepository()
                    ]
                ],
                'parameters' => [
                    'schema' => [
                        'repository' => $this->getRequestParamsSchemaRepository()
                    ]
                ]
            ],
            'response' => [
                'contentType' => $this->getResponseContentType()
            ]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function jsonSerialize(): array
    {
        return $this->toArray();
    }

    /**
     * {@inheritdoc}
     */
    public function getVersion(): string
    {
        return $this->version;
    }

    /**
     * @param string $version
     * @return EndpointConfig
     */
    private function setVersion(string $version): EndpointConfig
    {
        $this->version = $version;
        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getUrlPrefix(): string
    {
        return $this->urlPrefix;
    }

    /**
     * @param string $urlPrefix
     * @return EndpointConfig
     */
    private function setUrlPrefix(string $urlPrefix): EndpointConfig
    {
        $this->urlPrefix = $urlPrefix;
        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthenticationType(): string
    {
        return $this->authenticationType;
    }

    /**
     * @param string $authenticationType
     * @return EndpointConfig
     */
    private function setAuthenticationType(string $authenticationType): EndpointConfig
    {
        $this->authenticationType = $authenticationType;
        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @param string $name
     * @return EndpointConfig
     */
    private function setName(string $name): EndpointConfig
    {
        $this->name = $name;
        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * @param string $description
     * @return EndpointConfig
     */
    private function setDescription(string $description): EndpointConfig
    {
        $this->description = $description;
        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getDispatcherClass(): string
    {
        return $this->dispatcherClass;
    }

    /**
     * @param string $dispatcherClass
     * @return EndpointConfig
     */
    private function setDispatcherClass(string $dispatcherClass): EndpointConfig
    {
        $this->dispatcherClass = $dispatcherClass;
        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getRequestMethod(): string
    {
        return $this->requestMethod;
    }

    /**
     * @param string $requestMethod
     * @return EndpointConfig
     */
    private function setRequestMethod(string $requestMethod): EndpointConfig
    {
        $this->requestMethod = $requestMethod;
        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getRequestHeadersSchemaRepository(): string
    {
        return $this->requestHeadersSchemaRepository;
    }

    /**
     * @param string $requestHeadersSchemaRepository
     * @return EndpointConfig
     */
    private function setRequestHeadersSchemaRepository(string $requestHeadersSchemaRepository): EndpointConfig
    {
        $this->requestHeadersSchemaRepository = $requestHeadersSchemaRepository;
        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getRequestParamsSchemaRepository(): string
    {
        return $this->requestParamsSchemaRepository;
    }

    /**
     * @param string $requestParamsSchemaRepository
     * @return EndpointConfig
     */
    private function setRequestParamsSchemaRepository(string $requestParamsSchemaRepository): EndpointConfig
    {
        $this->requestParamsSchemaRepository = $requestParamsSchemaRepository;
        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getResponseContentType(): string
    {
        return $this->responseContentType;
    }

    /**
     * @param string $responseContentType
     * @return EndpointConfig
     */
    private function setResponseContentType(string $responseContentType): EndpointConfig
    {
        $this->responseContentType = $responseContentType;
        return $this;
    }
}